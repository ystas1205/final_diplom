version: '3.9'
# Общая сеть для всех контейнеров
networks:
  product_service_network:

services:
  product_service:
    # Берем Dockerfile из каталога product_sevice
    build:
      context: ./product_service
    networks:
      product_service_network:
    # Внешний том(volume) и место где он будет подключен внутри контейнера
    # и статика внутри контейнера
    volumes:
      - ./product_service/:/app
      - static_volume:/app/static
    # Перезапускаем все остановленные и работающие службы
    restart: always
    # Открываем порт 8000 внутри и снаружи 8001
    ports:
      - "8001:8000"
    # Переменные окружения
    env_file:
      - .env
    # Запускаем сначала postgres
    depends_on:
      - db
  # Образ и версия базы, которую мы будем использовать
  db:
    image: postgres:latest
    networks:
      product_service_network:
    # Перезапускаем все остановленные и работающие службы
    restart: always
    container_name: postgres
    # Внешний том(volume) и место где он будет подключен внутри контейнера
    volumes:
      - postgres_volume:/var/lib/postgresql/data/
    # Учетные данные
    env_file:
      - .env
      # Открываем порт 5432 внутри и снаружи
    ports:
      - "5432-5432"

  # Образ и версия NGINX, который будем использовать
  nginx:
    image: nginx:latest
    networks:
      product_service_network:
    # Данные conf файла копируем в контейнер  и статику
    volumes:
      - ./conf/nginx.conf:/etc/nginx/nginx.conf
      - static_volume:/static
    # Открываем порт 80 внутри и снаружи    -
    ports:
      - "80:80"
    # Ждем запуска python    -
    depends_on:
      - product_service

  # Образ и версия Redis, который будем использовать
  redis:
    image: redis:latest
    networks:
      product_service_network:
    # Перезапускаем все остановленные и работающие службы
    restart: always
    # Открываем порт 6379 внутри и снаружи
    ports:
      - "6379:6379"


  celery:
    # Берем данные из каталога product_sevice
    build:
      context: ./product_service
    networks:
      product_service_network:
    # Завускаем задачи для celery
    command: celery -A product_service worker -l info
    # Внешний том(volume) и место где он будет подключен внутри контейнера
    volumes:
      - ./product_service:/app
    # Переменные    -
    env_file:
      - .env
    # Ждем запуска redis и postgres    -
    depends_on:
      - redis
      - db


volumes:
  postgres_volume:
  static_volume:




